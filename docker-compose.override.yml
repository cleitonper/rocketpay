version: '3.8'

services:
  api:
    container_name: api
    env_file: .env.dev
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        ELIXIR_VERSION: ${ELIXIR_VERSION:-1.11-alpine}
        USER: ${USER:-elixir}
        GID: ${GID:-1000}
        UID: ${UID:-1000}
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4000/"]
      interval: 30s
      timeout: 5s
      retries: 5
    volumes:
      - .:${HOME}/app
      - ${HOME}/app/deps
      - ${HOME}/app/_build
  grafana:
    image: grafana/grafana:7.5.2
    container_name: grafana
    env_file: ./docker/grafana/.env.dev
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning
  prometheus:
    image: prom/prometheus:v2.26.0
    container_name: prometheus
    ports:
      - "9000:9000"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/config.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
  postgres_exporter:
    image: wrouesnel/postgres_exporter:v0.8.0
    container_name: postgres_exporter
    env_file: ./docker/postgres_exporter/.env.dev
    ports:
      - '9187:9187'
    depends_on:
      - postgres
  postgres:
    container_name: postgres
    env_file: ./docker/postgres/.env.dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 5s
      retries: 5
volumes:
  grafana_data:
  prometheus_data:
