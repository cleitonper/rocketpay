version: '3'

services:
  api:
    image: rocketpay:${APP_VERSION:-latest}
    container_name: api
    restart: on-failure
    build:
      args:
        ELIXIR_VERSION: ${ELIXIR_VERSION:-1.11-alpine}
        USER: ${USER:-elixir}
        GID: ${GID:-1000}
        UID: ${UID:-1000}
    healthcheck:
      test: ["CMD", "curl", "http://localhost:${PORT:-4000}/api"]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres
  grafana:
    image: grafana/grafana:7.5.2
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/:/etc/grafana/provisioning/
  prometheus:
    image: prom/prometheus:v2.26.0
    container_name: prometheus
    ports:
      - "9000:9000"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/config.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
  postgres_exporter:
    image: wrouesnel/postgres_exporter:v0.8.0
    container_name: postgres_prometheus
    ports:
      - '9187:9187'
    depends_on:
      - postgres
  postgres:
    image: postgres:${POSTGRES_VERSION:-13-alpine}
    container_name: postgres
    restart: on-failure
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    command: -p ${POSTGRES_PORT:-5432}
volumes:
  grafana_data:
  prometheus_data:
  pgdata:
networks:
  default:
    name: rocketpay