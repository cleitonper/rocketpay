name: Continous Delivery

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to deploy
        default: 'latest'
        required: true

env:
  AWS_REGION: us-east-1
  APP_NAME: rocketpay
  DOMAIN: '*.rocketpay.tk'

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: deployment
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build, tag, and push image to Amazon ECR
        id: push-ecr
        uses: docker/build-push-action@v2
        with:
          push: true
          target: production
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ github.event.inputs.version }}

      - name: Download task definition
        id: download-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition $APP_NAME \
            --query taskDefinition > task-definition.json
          echo "::set-output name=revision::$(cat task-definition.json | jq .revision)"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.APP_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ github.event.inputs.version }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.APP_NAME }}
          cluster: ${{ env.APP_NAME }}
          wait-for-service-stability: true

      - name: De-register previous revision
        run: |
          aws ecs deregister-task-definition \
            --task-definition ${{ env.APP_NAME }}:${{ steps.download-task-def.outputs.revision }}
