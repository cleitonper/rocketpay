name: Continous Integration

on:
  push:
    tags: [ v*.*.* ]
    branches: [ main, release/v*.*.* ]
    paths-ignore: [ 'docs/**', '*.md' ]

env:
  SIGNING_SALT: ${{ secrets.SIGNING_SALT }}
  SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
  AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
  AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  MIX_ENV: test

jobs:
  deps:
    name: Dependencies
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: '23.2.5'
          elixir-version: '1.11.3'

      - name: Restore dependencies cache
        uses: actions/cache@v2
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Restore dialyzer cache
        uses: actions/cache@v2
        id: plts-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-plts-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-plts-

      - name: Install dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Create dialyzer plts
        if: steps.plts-cache.outputs.cache-hit != 'true'
        env: {MIX_ENV: dev}
        run: mix dialyzer --plt

  test:
    needs: deps
    name: Unit Tests
    runs-on: ubuntu-latest
    environment: test

    services:
      postgres:
        image: postgres:13
        ports: ['5432:5432']
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: rocketpay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: '23.2.5'
          elixir-version: '1.11.3'

      - name: Restore dependencies cache
        uses: actions/cache@v2
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Setup database
        run: mix ecto.setup

      - name: Run tests
        run: mix coveralls.json

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v1

  static_code_analysis:
    needs: deps
    name: Static Code Analysis
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: '23.2.5'
          elixir-version: '1.11.3'

      - name: Restore dependencies cache
        uses: actions/cache@v2
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Restore dialyzer cache
        uses: actions/cache@v2
        id: plts-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-plts-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-plts-

      - name: Run credo
        run: mix credo

      - name: Run dialyzer
        env: {MIX_ENV: dev}
        run: mix dialyzer --no-check

  deploy:
    if: ${{ contains( github.ref, 'release/v' ) || contains( github.ref, 'tags/v' ) }}
    needs: [ test, static_code_analysis ]
    name: Trigger Deployment
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Get version
        id: get-version
        run: |
          echo "The new version is ${GITHUB_REF##*/v}"
          echo ::set-output name=version::${GITHUB_REF##*/v}

      - name: Generate payload
        id: generate-payload
        run: |
          echo "The payload is { version: ${{ steps.get-version.outputs.version }} }"
          echo ::set-output name=payload::'{ "version": "${{ steps.get-version.outputs.version }}" }'

      - name: Dispatch deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/actions/workflows/cd.yml/dispatches
          repository: ${{ github.repository }}
          inputs: ${{ steps.generate-payload.outputs.payload }}
          ref: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
