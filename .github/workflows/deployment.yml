name: Deploy to Amazon ECS

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to deploy
        default: 'latest'
        required: true

env:
  # AWS
  AWS_REGION: us-east-1
  ECR_REPOSITORY: rocketpay
  ECS_CLUSTER: rocketpay
  ECS_SERVICE: rocketpay-ApiService
  ECS_TASK_DEFINITION: rocketpay-api
  CONTAINER_NAME: api

  # Application
  SIGNING_SALT: ${{ secrets.SIGNING_SALT }}
  SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
  AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
  AUTH_SECRET: ${{ secrets.AUTH_SECRET }}

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: deployment
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup docker
        uses: ./.github/workflows/local/setup-docker

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ env.VERSION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rocketpay
        run: |
          docker build --target production --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create AWS Context
        run: docker context create ecs --from-env aws
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Use AWS context
        run: docker context use aws

      - name: Push new version to aws
        run: docker compose -f docker-compose.yml -f docker-compose.deploy.yml up -d
        env:
          APP_VERSION: ${{ env.VERSION }}